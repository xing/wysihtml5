h1. wysihtml5 0.2.0

wysihtml5 is an open source rich text editor based on HTML5 technology and the progressive-enhancement approach.
It uses a sophisticated security concept and aims to generate fully valid HTML5 markup by preventing unmaintainable tag soups and inline styles.
The code is completely library agnostic: No jQuery, Prototype or similar is required.
The editor is already in use on "XING.com":https://www.xing.com - a social network with more than 10 million members.

h2. Features:

* Auto linking of urls as-you-type
* Generates valid and semantic HTML5 markup (no <code><font></code>)
* Uses class-names instead of inline styles
* Unifies line-break handling across browsers (hitting enter will create <code><br></code> instead of <code><p></code> or <code><div></code>)
* Auto-parses content inserted via copy & paste (from Word, Powerpoint, PDF, other web pages, ...)
* Converts invalid or unknown html tags into valid/similar tags
* Source code view for users with HTML skills
* Uses sandboxed iframes in order to prevent identity theft through XSS
* Editor inherits styles and attributes (placeholder, autofocus, ...) from original textarea (you only have to style one element)
* Speech-input for Chrome 11+

h2. Browser Support

The rich text editing interface is supported in IE8+, FF 3.5+, Safari 4+, Opera 11+ and Chrome.
*Graceful Degradation:* Users with other browsers will see the textarea and are still able write plain HTML by themselves.
As of now iOS and Android donâ€™t support rich text editing properly. For now they are treated like IE 6+7.

h2. Demos

* "Simple Editor with italic and bold buttons":http://tifftiff.de/wysihtml5/examples/simple.html
* "Editor with advanced functionality":http://tifftiff.de/wysihtml5/examples/advanced.html

h2. Configuration

Following is a list of all configuration options with their corresponding default values:

<pre>
  new wysihtml5.Editor("textarea-id", {
    // Give the editor a name, the name will also be set as class name on the iframe and on the iframe's body
    name:                 null,
    // Whether the editor should look like the textarea (by adopting styles)
    style:                true,
    // Id of the toolbar element, pass falsey value if you don't want any toolbar logic
    toolbar:              null,
    // Whether urls, entered by the user should automatically become clickable-links
    autoLink:             true,
    // Object which includes parser rules (set this to examples/rules/spec.json or your own spec, otherwise only span tags are allowed!)
    parserRules:          null,
    // Parser method to use when the user inserts content via copy & paste
    parser:               wysihtml5.dom.parse || Prototype.K,
    // Class name which should be set on the contentEditable element in the created sandbox iframe, can be styled via the 'stylesheets' option
    composerClassName:    "wysihtml5-editor",
    // Class name to add to the body when the wysihtml5 editor is supported
    bodyClassName:        "wysihtml5-supported",
    // Array (or single string) of stylesheet urls to be loaded in the editor's iframe
    stylesheets:          [],
    // Placeholder text to use, defaults to the placeholder attribute on the textarea element
    placeholderText:      null,
    // Whether the composer should allow the user to manually resize images, tables etc.
    allowObjectResizing:  true
  });
</pre>

h2. Events

The editor comes with a simple event handling:

<pre>
  var editor = new wyishtml5.Editor("textarea-id", { ... });
  editor.observe("change", function() {
    alert("The content of the editor has changed")
  });
  
  editor.observe("load", function() {
    alert("wysihtml5 is ready for take off!");
  });
</pre>

List of supported events:
* _load_ - when the editor is fully loaded
* _beforeload_ - for internal use only
* _focus_ - when the editor (regardless if rich text or source view) receives focus
* _focus:composer_ - when the rich text view receives focus
* _focus:textarea_ - when the source view receives focus
* _blur_ - when the editor (regardless if rich text or source view) gets blurred
* _blur:composer_ - when the rich text view gets blurred
* _blur:textarea_ - when the source view gets blurred
* _change_ - when the value changed (regardless if rich text or source view)
* _change:composer_ - when the value of the rich text view got changed
* _change:textarea_ - when the value of the source view got changed
* _paste_ - when the user pastes or drops content (regardless if rich text or source view)
* _paste:composer_ - when the user pastes or drops content into the rich text view
* _paste:textarea_ - when the user pastes or drops content into the source view
* _newword:composer_ - when the user wrote a new word in the rich text view
* _destroy:composer_ - when the rich text view gets removed
* _change_view_ - when switched between source and rich text view
* _show:dialog_ - when a toolbar dialog is shown
* _save:dialog_ - when save in a toolbar dialog is clicked
* _cancel:dialog_ - when cancel in a toolbar dialog is clicked

h2. Progressive-Enhancement/Initialization Step By Step

# Takes a <code><textarea></code>
# Checks whether the browser supports rich text editing properly (stops here if not)
# Sets a class "wysihtml5-supported" on the <code><body></code> of the page (can be used to toggle text hints on the page via CSS)
# Creates an inline <code><iframe></code> with <code><body contenteditable="true"></code>
# Copies textarea box styles (float, border, position, box-shadow, ...) to the 
<code><iframe></code>
# Copies textarea text styles (color, font-size, font-family, text-indent, ...) to 
the iframe's <code><body></code>
# Copies several attributes (spellcheck, autofocus, placeholder, className, title, ...) 
from the <code><textarea></code> to the iframe's <code><body></code>
# Checks whether HTMl5 autofocus and placeholder attributes are set and 
simulates their logic on the iframe's <code><body></code>
# Hides the <code><textarea></code>
# Initializes sync logic (text you typed into the iframe's <code><body></code> is automatically
copied to the hidden <code><textarea></code>)
# Observes the form's "onsubmit" and "onreset" events and simulates their
behavior on the iframe's <code><body></code>
# Checks whether a toolbar is given and sets event listeners on it's link

h2. How to build your own wysihtml5 files

Clone and build the js file:
<pre>git clone git://github.com/xing/wysihtml5.git
cd wysihtml5
make</pre>

Run the unit tests:
<pre>make unittest</pre>

h2. Research Material

Before starting this library we spent a lot of time investigating the different browsers and their behaviors.

Check this repository:
"https://github.com/tiff/wysihtml5-tests":https://github.com/tiff/wysihtml5-tests

A compatibility table for rich text query commands can be found here:
"http://tifftiff.de/contenteditable/compliance_test.html":http://tifftiff.de/contenteditable/compliance_test.html

A pure native rich text editor with HTML validator and live source preview is here:
"http://tifftiff.de/contenteditable/editor.html":http://tifftiff.de/contenteditable/editor.html

h2. Contributors

* "@tiff":https://github.com/tiff
* "@ingochao":https://github.com/ingochao
* "@uwe":https://github.com/uwe